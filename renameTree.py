#!/usr/bin/env python3

import argparse, sys, os, glob, re
from Bio import Phylo
from Bio import SeqIO

def parseArgs():
    '''
    Argument parsing is done.
    '''
    parser = argparse.ArgumentParser(description='Rename tree generated with scan_cluster.')
    inputArgs = parser.add_argument_group('Required files/folders')#Genome with the query cluster, gb file
    inputArgs.add_argument("-t", "--treefile",help="Tree generated by scan_cluster.", dest="tfile", action='store', required=True)
    inputArgs.add_argument("-g", "--genomeFolder",help="Folder with the genomes in genbank format.", dest="gfolder", action='store', required=False)
    inputArgs.add_argument("--genomeTable",help="Genome.csv table generated by getGenomeTable.py.", dest="gtable", action='store', required=False)
    inputArgs.add_argument("-a", "--annotationFile",help="Itol annotation file.", dest="afile", action='store', required=True)
    args = parser.parse_args()
    return args
    #start and end cluster coordinates

def getGenomeInfo(gfile):
    accession = os.path.splitext(os.path.basename(gfile))[0]
    try:
        name = list(SeqIO.parse(gfile,'gb'))[0].description.split(',')[0]
        name = re.sub(' ?[Cc][Oo][Nn][Tt][Ii][Gg].*$','',name)
        desc = re.sub(' ?[Nn][Oo][Dd][Ee].*$','',desc)
        desc = re.sub(' ?[Ss][cC][aA][Ff].*$','',desc)
        desc = re.sub(' ?[Pp][Ll][aA][Ss].*$','',desc)
        desc = re.sub(' ?[Cc][Hh][Rr][Oo].*$','',desc)
        return(accession, name)
    except:
        print(f'Error: can not get the genome name, the accession number {accession} will not be renamed...')
        return(accession, accession)

def getGenomeInfoFromTable(gtable):
    import pandas as pd
    import re
    table = pd.read_csv(gtable)
    gdict = {r['Assembly Accession number']:re.sub(' ?[CNSPcnsp][OCLHoclh][NDARndar][TEFSOtefso].*$','',r['Description'].split(',')[0]) for _,r in table.iterrows()}
    return(gdict)

if __name__ == "__main__":
    args = parseArgs()
    tree_file = args.tfile
    afile = args.afile
    if args.gfolder and not args.gtable:
        genomeFolder= args.gfolder
        print(f'Processing {tree_file},{genomeFolder},{afile}...')
        useGBFiles = True
    elif args.gtable and not args.gfolder:
        gtable = args.gtable
        gdict = getGenomeInfoFromTable(gtable)
        print(f'Processing {tree_file},{gtable},{afile}...')
        useGBFiles = False
    else:
        sys.exit(f'Error: Genome folder or genome.csv files required...')
    

    if os.path.exists(tree_file):
        tree = Phylo.read(tree_file,'nexus')
    else:
        sys.exit(f'{tree_file} file not found...')

    if useGBFiles:        
        gfiles = glob.glob(f'{genomeFolder}/*.gb')
        gfiles = { os.path.splitext(os.path.basename(f))[0]:f for f in gfiles}
    #
    print(f'Renaming tree...')
    for leaf in tree.get_terminals():
        name = leaf.name.split('__')[0]
        rep = leaf.name.split('__')[1]
        coords = leaf.name.split('__')[2]
        if useGBFiles:
            accession,newname = getGenomeInfo(gfiles[name])
        else:
            newname = gdict[name]
        lname = re.sub('[:;\\/]',' ',f'{newname}__{rep}__{coords}')
        leaf.name = lname
        print(f'Renaming {leaf.name} to {lname}')
    #
    ntreefile = os.path.splitext(tree_file)[0]+'_rn.nhx'
    Phylo.write(tree,ntreefile,'nexus')

    with open(ntreefile,'r') as infile, open('tmp.txt','w') as outfile:
        for line in infile:
            line = re.sub("\\'","",line)
            outfile.write(line)
    os.rename('tmp.txt',ntreefile)
    #rename annotation file
    if os.path.exists(afile):
        print(f'Renaming Itol annotation...')
        newafile = os.path.splitext(afile)[0]+'_rn.txt'
        with open(afile,'r') as r, open(newafile,'w') as w:
            for line in r:
                if ('GCF' in line) or ('GCA' in line):
                    a = line.split(',')[0].split('__')
                    if useGBFiles:
                        accession,name = getGenomeInfo(gfiles[a[0]])
                    else:
                        name = gdict[a[0]]
                    na = re.sub('[:;\\/]',' ',f'{name}__{a[1]}__{a[2]}')
                    b =','.join(line.split(',')[1:])
                    print(f'Renaming {a} to  {na}')
                    w.write(f'{na},{b}')
                else:
                    w.write(line)

